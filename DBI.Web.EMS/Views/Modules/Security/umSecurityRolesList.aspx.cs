using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using DBI.Core.Web;
using DBI.Data;
using DBI.Data.DataFactory.Security;
using Ext.Net;

namespace DBI.Web.EMS.Views.Modules.Security
{
    public partial class umSecurityRolesList : BasePage
    {
        protected void Page_Load(object sender, EventArgs e)
        {

            if (!X.IsAjaxRequest)
            {

                if (Request.Cookies["UserSettings"] != null)
                {
                    string RTL;
                    HttpCookie myCookie = new HttpCookie("UserSettings");
                    myCookie = Request.Cookies["UserSettings"];
                    RTL = myCookie["RTL"];
                    //Check for RTL support
                    if (RTL == "True")
                    {
                        uxViewPort.RTL = true;
                    }
                }
            }
        }

        /// <summary>
        /// Data bind system roles to the gridpanel
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void deRolesDatabind(object sender, StoreReadDataEventArgs e)
        {
                int total;
                IEnumerable<SYS_ROLES> data = DBI.Data.DataFactory.Security.Roles.RoleList(e.Start, e.Limit, e.Sort, e.Parameters["filter"], out total);
                e.Total = total;
                uxSecurityRoleGridPanel.GetStore().DataSource = data;
                //throw new Exception(string.Format("Error getting roles from the server</br>{0}",Guid.NewGuid().ToString()));
        }



        /// <summary>
        /// Deletes a System Role
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void deDeleteRole(object sender, DirectEventArgs e)
        {
            RowSelectionModel sm = uxSecurityRoleGridPanel.GetSelectionModel() as RowSelectionModel;
            long ROLE_ID = long.Parse(sm.SelectedRow.RecordID);

            DBI.Data.DataFactory.Security.Roles.DeleteRoleByID(ROLE_ID);

            //Refresh the view.
            uxSecurityRoleStore.Reload();
           
        }

        /// <summary>
        /// Edits a system role
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void deEditRole(object sender, DirectEventArgs e)
        {
            RowSelectionModel sm = uxSecurityRoleGridPanel.GetSelectionModel() as RowSelectionModel;
            long ROLE_ID = long.Parse(sm.SelectedRow.RecordID);

            SYS_ROLES role = Roles.RoleByID(ROLE_ID);
            
            //Show the Window
            uxSecurityAddRoleWindow.Show();

            this.uxSecurityRoleDetails.SetValues(new
            {
                role.ROLE_ID,
                role.NAME,
                role.DESCRIPTION
            });

        }

        /// <summary>
        /// Save a system role after it has been created or modified.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void deSaveRole(object sender, DirectEventArgs e)
        {

            if (uxName.Text == "" || uxDescription.Text == "")
            {
                X.Msg.Alert("Fields Missing", "Name and Description are required fields!").Show();
            }
            else
            {
                DBI.Data.SYS_ROLES role = new Data.SYS_ROLES();
                if (uxRoleID.Text != "")
                {
                    role.ROLE_ID = long.Parse(uxRoleID.Text);
                }
                role.NAME = uxName.Text;
                role.DESCRIPTION = uxDescription.Text;
                DBI.Data.DataFactory.Security.Roles.SaveRole(role);

                //Refresh the view.
                uxSecurityRoleStore.Reload();

                uxSecurityRoleDetails.Reset();

                //Close the autogenerated window
                uxSecurityAddRoleWindow.Close();

            }

        }

    }
}